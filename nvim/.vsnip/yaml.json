{
    "ConfigMap": {
        "prefix": [
            "k8sConfigMap",
            "kube.cm",
            "kube.configmap"
        ],
        "description": "ConfigMap",
        "body": [
            "kind: ConfigMap",
            "apiVersion: v1",
            "metadata:",
            "  name: ${1:CM}",
            "  namespace: ${3:default}",
            "data:",
            "  ${2:key}: ${3:value}"
        ]
    },
    "Endpoints": {
        "prefix": [
            "k8sEndpoints",
            "kube.ep",
            "kube.endpoints"
        ],
        "description": "Endpoints",
        "body": [
            "# When the EndpointController starts, it will detect the endpoints without corresponding services, and delete these endpoints.",
            "# Create a Services without Selectors",
            "apiVersion: v1",
            "kind: Service",
            "metadata:",
            "  name: ${1:EndpointsName}",
            "  namespace: default",
            "spec:",
            "  ports:",
            "    - protocol: TCP",
            "      port: 80",
            "      targetPort: 9376",
            "---",
            "# Because this Service has no selector, the corresponding Endpoint object is not created automatically.",
            "# You can manually map the Service to the network address and port where itâ€™s running,",
            "# by adding an Endpoint object manually:",
            "apiVersion: v1",
            "kind: Endpoints",
            "metadata:",
            "  name: ${1:EndpointsName}",
            "  namespace: default",
            "subsets:",
            "- addresses:",
            "  - ip: 10.0.0.1",
            "  - ip: 10.0.0.2",
            "  - ip: 10.0.0.3",
            "  ports:",
            "  - name: http",
            "    port: 9376",
            "    protocol: TCP"
        ]
    },
    "Ingress": {
        "prefix": [
            "k8sIngress",
            "kube.ingress"
        ],
        "description": "Ingress",
        "body": [
            "# https://kubernetes.io/docs/concepts/services-networking/ingress/#the-ingress-resource",
            "",
            "apiVersion: networking.k8s.io/v1",
            "kind: Ingress",
            "metadata:",
            "  name: ${1:IngressName}",
            "  namespace: ${2:default}",
            "spec:",
            "  rules:",
            "  - host: ${3:foo.bar.com}",
            "    http:",
            "      paths:",
            "      - path: ${4:/}",
            "        pathType: ${5|Prefix,Exact,ImplementationSpecific|}",
            "        backend:",
            "          service:",
            "            name: ${6:ServiceName}",
            "            port:",
            "              number: ${7:80}"
        ]
    },
    "Ingress(TLS)": {
        "prefix": [
            "k8sIngress(TLS)",
            "kube.ingress_tls"
        ],
        "description": "Ingress(TLS)",
        "body": [
            "# https://kubernetes.io/docs/concepts/services-networking/ingress/#tls",
            "",
            "apiVersion: v1",
            "kind: Secret",
            "metadata:",
            "  name: ${1:testsecret-tls}",
            "  namespace: ${2:default}",
            "type: kubernetes.io/tls",
            "# The TLS secret must contain keys named 'tls.crt' and 'tls.key' that contain the certificate and private key to use for TLS.",
            "data:",
            "  tls.crt: ${3:base64 encoded public key content}",
            "  tls.key: ${4:base64 encoded private key content}",
            "",
            "---",
            "apiVersion: networking.k8s.io/v1",
            "kind: Ingress",
            "metadata:",
            "  name: ${5:tls-example-ingress}",
            "  namespace: ${2:default}",
            "spec:",
            "  tls:",
            "  - hosts:",
            "      - ${6:https-example.foo.com}",
            "    secretName: ${1:testsecret-tls}",
            "  rules:",
            "  - host: ${6:https-example.foo.com}",
            "    http:",
            "      paths:",
            "      - path: ${7:/}",
            "        pathType: ${8|Prefix,Exact,ImplementationSpecific|}",
            "        backend:",
            "          service:",
            "            name: ${9:service1}",
            "            port:",
            "              number: ${10:80}"
        ]
    },
    "TraefikMiddleware": {
        "prefix": [
            "k8sTraefikMiddleware",
            "kube.traefik_middleware"
        ],
        "description": "Traefik Middleware",
        "body": [
            "apiVersion: traefik.containo.us/v1alpha1",
            "kind: Middleware",
            "metadata:",
            "  name: ${1:middlewareName}",
            "  namespace: ${2:default}",
            "",
            "spec:",
            "  stripPrefix:",
            "    prefixes:",
            "      - /stripit"
        ]
    },
    "PersistentVolumeClaim": {
        "prefix": [
            "k8sPersistentVolumeClaim",
            "kube.pvc",
            "kube.persistent_volume_claim"
        ],
        "description": "",
        "body": [
            "apiVersion: v1",
            "kind: PersistentVolumeClaim",
            "metadata:",
            "  name: ${1:MYAPP}",
            "  namespace: default",
            "  labels:",
            "    app: ${1:MYAPP}",
            "spec:",
            "  storageClassName: ${2|rook-ceph-block,rook-ceph-fs|}",
            "  accessModes:",
            "  - ${3|ReadWriteOnce,ReadWriteMany,ReadOnlyMany|}",
            "  resources:",
            "    requests:",
            "      storage: ${4:2Gi}"
        ]
    },
    "Secret": {
        "prefix": [
            "k8sSecret",
            "kube.secret"
        ],
        "description": "Secret",
        "body": [
            "apiVersion: v1",
            "kind: Secret",
            "metadata:",
            "  name: ${1:mysecret}",
            "  namespace: ${2:default}",
            "type: Opaque",
            "data:",
            "  # Example:",
            "  # password: {{ .Values.password | b64enc }}"
        ]
    },
    "Service": {
        "prefix": [
            "k8sService",
            "kube.svc",
            "kube.service"
        ],
        "description": "KubernetesService",
        "body": [
            "apiVersion: v1",
            "kind: Service",
            "metadata:",
            "  name: ${1:MYAPP}",
            "  namespace: default",
            "spec:",
            "  selector:",
            "    app: ${1:MYAPP}",
            "  type: ${2|ClusterIP,NodePort,LoadBalancer,ExternalName|}",
            "  sessionAffinity: ${3|None,ClientIP|}",
            "  sessionAffinityConfig:",
            "    clientIP:",
            "      timeoutSeconds: 10800",
            "  ports:",
            "  - name: ${1:MYAPP}",
            "    protocol: ${4|TCP,UDP|}",
            "    port: ${5}",
            "    targetPort: ${6}",
            "    # If you set the `spec.type` field to `NodePort` and you want a specific port number,",
            "    # you can specify a value in the `spec.ports[*].nodePort` field.",
            "    nodePort: ${5}"
        ]
    },
    "Pod": {
        "prefix": [
            "k8sPod",
            "kube.pod"
        ],
        "description": "Pod",
        "body": [
            "apiVersion: v1",
            "kind: Pod",
            "metadata:",
            "  name: \"${1:MYAPP}\"",
            "  namespace: default",
            "  labels:",
            "    app: \"${1:MYAPP}\"",
            "spec:",
            "  containers:",
            "  - name: ${1:MYAPP}",
            "    image: \"${2:debian-slim}:${3:latest}\"",
            "    resources:",
            "      limits:",
            "        cpu: 200m",
            "        memory: 500Mi",
            "      requests:",
            "        cpu: 100m",
            "        memory: 200Mi",
            "    env:",
            "    - name: DB_HOST",
            "      valueFrom:",
            "        configMapKeyRef:",
            "          name: MYAPP",
            "          key: DB_HOST",
            "    ports:",
            "    - containerPort:  80",
            "      name:  http",
            "    volumeMounts:",
            "    - name: localtime",
            "      mountPath: /etc/localtime",
            "  volumes:",
            "    - name: localtime",
            "      hostPath:",
            "        path: /usr/share/zoneinfo/Asia/Shanghai",
            "  restartPolicy: Always"
        ]
    },
    "Deployment": {
        "prefix": [
            "k8sDeployment",
            "kube.deploy",
            "kube.deployment"
        ],
        "description": "Deploymment",
        "body": [
            "apiVersion: apps/v1",
            "kind: Deployment",
            "metadata:",
            "  name:  ${1:MYAPP}",
            "  namespace: default",
            "  labels:",
            "    app:  ${1:MYAPP}",
            "spec:",
            "  selector:",
            "    matchLabels:",
            "      app: ${1:MYAPP}",
            "  replicas: 1",
            "  strategy:",
            "    rollingUpdate:",
            "      maxSurge: 25%",
            "      maxUnavailable: 25%",
            "    type: RollingUpdate",
            "  template:",
            "    metadata:",
            "      labels:",
            "        app:  ${1:MYAPP}",
            "    spec:",
            "      # initContainers:",
            "        # Init containers are exactly like regular containers, except:",
            "          # - Init containers always run to completion.",
            "          # - Each init container must complete successfully before the next one starts.",
            "      containers:",
            "      - name:  ${1:MYAPP}",
            "        image:  ${2:MYAPP:latest}",
            "        resources:",
            "          requests:",
            "            cpu: 100m",
            "            memory: 100Mi",
            "          limits:",
            "            cpu: 100m",
            "            memory: 100Mi",
            "        livenessProbe:",
            "          tcpSocket:",
            "            port: ${3:80}",
            "          initialDelaySeconds: 5",
            "          timeoutSeconds: 5",
            "          successThreshold: 1",
            "          failureThreshold: 3",
            "          periodSeconds: 10",
            "        readinessProbe:",
            "          httpGet:",
            "            path: /_status/healthz",
            "            port: ${3:80}",
            "          initialDelaySeconds: 5",
            "          timeoutSeconds: 2",
            "          successThreshold: 1",
            "          failureThreshold: 3",
            "          periodSeconds: 10",
            "        env:",
            "        - name: DB_HOST",
            "          valueFrom:",
            "            configMapKeyRef:",
            "              name: ${1:MYAPP}",
            "              key: DB_HOST",
            "        ports:",
            "        - containerPort:  ${3:80}",
            "          name:  ${1:MYAPP}",
            "        volumeMounts:",
            "        - name: localtime",
            "          mountPath: /etc/localtime",
            "      volumes:",
            "        - name: localtime",
            "          hostPath:",
            "            path: /usr/share/zoneinfo/Asia/Shanghai",
            "      restartPolicy: Always"
        ]
    },
    "DaemonSet": {
        "prefix": [
            "k8sDaemonSet",
            "kube.ds",
            "kube.daemonset"
        ],
        "description": "",
        "body": [
            "apiVersion: apps/v1",
            "kind: DaemonSet",
            "metadata:",
            "  name: ${1:MYAPP}",
            "  namespace: default",
            "  labels:",
            "    app: ${1:MYAPP}",
            "spec:",
            "  selector:",
            "    matchLabels:",
            "      app: ${1:MYAPP}",
            "  template:",
            "    metadata:",
            "      labels:",
            "        app: ${1:MYAPP}",
            "    spec:",
            "      tolerations:",
            "      # this toleration is to have the daemonset runnable on master nodes",
            "      # remove it if your masters can't run pods",
            "      - key: node-role.kubernetes.io/master",
            "        effect: NoSchedule",
            "      containers:",
            "      - name: ${1:MYAPP}",
            "        image: ${2:debian}",
            "        resources:",
            "          limits:",
            "            memory: 200Mi",
            "          requests:",
            "            cpu: 100m",
            "            memory: 200Mi",
            "        volumeMounts:",
            "        - name: localtime",
            "          mountPath: /etc/localtime",
            "      terminationGracePeriodSeconds: 30",
            "      volumes:",
            "      - name: localtime",
            "        hostPath:",
            "          path: /usr/share/zoneinfo/Asia/Shanghai"
        ]
    },
    "StatefulSet": {
        "prefix": [
            "k8sStatefulSet",
            "kube.statefulset"
        ],
        "description": "",
        "body": [
            "apiVersion: apps/v1",
            "kind: StatefulSet",
            "metadata:",
            "  name: ${1:nginx}",
            "  namespace: default",
            "spec:",
            "  selector:",
            "    matchLabels:",
            "      app: ${1:nginx} # has to match .spec.template.metadata.labels",
            "  serviceName: \"${1:nginx}\"",
            "  replicas: 3 # by default is 1",
            "  template:",
            "    metadata:",
            "      labels:",
            "        app: ${1:nginx} # has to match .spec.selector.matchLabels",
            "    spec:",
            "      terminationGracePeriodSeconds: 10",
            "      containers:",
            "      - name: ${1:nginx}",
            "        image: ${1:nginx}-slim:1.16.1",
            "        ports:",
            "        - containerPort: 80",
            "          name: web",
            "        volumeMounts:",
            "        - name: www",
            "          mountPath: /usr/share/nginx/html",
            "  volumeClaimTemplates:",
            "  - metadata:",
            "      name: www",
            "    spec:",
            "      accessModes: [ \"ReadWriteOnce\" ]",
            "      storageClassName: \"my-storage-class\"",
            "      resources:",
            "        requests:",
            "          storage: 1Gi"
        ]
    },
    "Job": {
        "prefix": [
            "k8sJob",
            "kube.job"
        ],
        "description": "",
        "body": [
            "apiVersion: batch/v1",
            "kind: Job",
            "metadata:",
            "  name: ${1:MYAPP}",
            "  namespace: default",
            "  labels:",
            "    app: ${1:MYAPP}",
            "spec:",
            "  template:",
            "    metadata:",
            "      name: ${1:MYAPP}",
            "      labels:",
            "        app: ${1:MYAPP}",
            "    spec:",
            "      containers:",
            "      - name: ${1:MYAPP}",
            "        image: python:3.7.6-alpine3.10",
            "        command: ['sh', '-c', 'python3 manage.py makemigrations && python3 manage.py migrate']",
            "        env:",
            "        - name: ENV_NAME",
            "          value: ENV_VALUE",
            "        volumeMounts:",
            "        - name: localtime",
            "          mountPath: /etc/localtime",
            "      volumes:",
            "      - name: localtime",
            "        hostPath:",
            "          path: /usr/share/zoneinfo/Asia/Shanghai",
            "      restartPolicy: OnFailure",
            "      dnsPolicy: ClusterFirst"
        ]
    },
    "CronJob": {
        "prefix": [
            "k8sCronJob",
            "kube.cronjob"
        ],
        "description": "",
        "body": [
            "apiVersion: batch/v1beta1",
            "kind: CronJob",
            "metadata:",
            "  name: hello",
            "  namespace: default",
            "spec:",
            "  schedule: \"*/1 * * * *\"",
            "  jobTemplate:",
            "    spec:",
            "      template:",
            "        spec:",
            "          containers:",
            "          - name: hello",
            "            image: busybox",
            "            args: ['/bin/sh', '-c', 'date; echo Hello from the Kubernetes cluster']",
            "          restartPolicy: OnFailure"
        ]
    },
    "ReplicaSet": {
        "prefix": [
            "k8sReplicaSet",
            "kube_rs",
            "kube_replicaset"
        ],
        "description": "",
        "body": [
            "apiVersion: apps/v1",
            "kind: ReplicaSet",
            "metadata:",
            "  name: ${1:MYAPP}",
            "  labels:",
            "    app: ${1:MYAPP}",
            "spec:",
            "  # modify replicas according to your case",
            "  replicas: ${2:3}",
            "  selector:",
            "    matchLabels:",
            "      app: ${1:MYAPP}",
            "  template:",
            "    metadata:",
            "      labels:",
            "        app: ${1:MYAPP}",
            "    spec:",
            "      containers:",
            "      - name: ${1:MYAPP}",
            "        image: ${3:nginx/nginx}",
            "        ports:",
            "        - name: web",
            "          containerPort:  80",
            "          protocol: TCP",
            "        env:",
            "        - name: NGX_VERSION",
            "          value: 1.16.1",
            "        volumeMounts:",
            "        - name: localtime",
            "          mountPath: /etc/localtime",
            "      volumes:",
            "        - name: localtime",
            "          hostPath:",
            "            path: /usr/share/zoneinfo/Asia/Shanghai"
        ]
    }
}
