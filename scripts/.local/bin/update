#!/usr/bin/env bash

set -euo pipefail

function tool:apt {
    if command -v apt &> /dev/null; then
        echo "Updating apt packages ..."
        sudo apt update
        sudo apt -y upgrade
        sudo apt autoremove
        sudo apt clean
    fi
}

function tool:asdf {
    if command -v asdf &> /dev/null; then
        echo "Updating asdf & plugins ..."
        asdf update || true
        asdf plugin update --all

        if [ "$(uname -m)" == "arm64" ]; then
            xasdf update || true
            xasdf plugin update --all
        fi
    fi
}

function tool:brew {
    if command -v brew &> /dev/null; then
        echo "Updating homebrew packages ..."
        brew update
        brew upgrade

        if [ "$(uname -m)" == "arm64" ]; then
            xbrew update
            xbrew upgrade
        fi
    fi
}

function tool:dotfiles {
    if [ -d "$HOME/.dotfiles" ]; then
        echo "Updating dotfiles ..."
        (
            cd "$HOME/.dotfiles" \
                && (git stash || true) \
                && git pull \
                && stow --no-folding -t ~ */ \
                && (git stash pop || true)
        )
        find -L "$HOME/.config" -type l -exec rm -i {} \;
        find -L "$HOME/.local/bin" -type l -exec rm -i {} \;
    fi
}

function tool:fish {
    if command -v fish &> /dev/null && [ -f "$HOME/.config/fish/fish_plugins" ]; then
        echo "Updating fish plugins ..."
        fish -c "fisher update"
        fish -c "set_abbr"
        fish -c "set_theme"
        fish -c "set_nextcloud"
    fi
}

function tool:misc {
    echo "Installing language servers ..."
    install_language_servers

    echo "Installing formatters and linters ..."
    install_formatters_linters

    echo "Updating ltex language server ..."
    install_ltex_language_server

    echo "Updating vale styles ..."
    install_vale_style_microsoft
}

function tool:npm {
    echo "Updating npm global packages ..."
    npm update --global
}

function tool:nvim {
    if command -v nvim &> /dev/null; then
        if command -v brew &> /dev/null && [ -n "$(brew list | grep neovim)" ]; then
            echo "Updating neovim ..."
            brew upgrade neovim --fetch-head
        fi

        echo "Updating neovim plugins ..."
        nvim \
            +TSUpdateSync \
            +qall

        nvim \
            +"autocmd User PackerComplete sleep 100m | write! /tmp/packer-sync-result.txt | quitall" \
            +PackerSync

        cat /tmp/packer-sync-result.txt
    fi
}

function tool:pipx {
    if command -v pipx &> /dev/null; then
        echo "Updating pipx packages ..."
        pipx upgrade-all
        pipx install poetry==1.1.15 --force
    fi
}

function tool:rust {
    if command -v rustup &> /dev/null; then
        echo "Updating rust ..."
        rustup update
    fi

    if command -v cargo &> /dev/null; then
        echo "Updating cargo packages ..."
        if ! cargo install --list | grep -q cargo-update; then
            cargo install cargo-update
        fi

        # PREV_CC=$CC

        # if [ "$(uname)" == "Darwin" ]; then
        #     unset CC
        # fi

        cargo install-update --all

        # export CC=$PREV_CC
    fi
}

function tool:scoop {
    if command -v scoop &> /dev/null; then
        echo "Updating scoop packages ..."
        pwsh="powershell.exe -NoProfile -NoLogo -NonInteractive cd ~;"
        $pwsh "scoop update *"
    fi
}

function tool:tmux {
    tmux_dir="$HOME/.tmux"
    tpm_bin_dir="$tmux_dir/plugins/tpm/bin"

    if [ -d "$tpm_bin_dir" ]; then
        echo "Updating tmux plugins ..."
        "$tpm_bin_dir/clean_plugins"
        "$tpm_bin_dir/install_plugins"
        "$tpm_bin_dir/update_plugins" all
    fi

    if [ -d "$tmux_dir/plugins/tmux-thumbs" ]; then
        echo "Building tmux-thumbs ..."
        (cd "$tmux_dir/plugins/tmux-thumbs" \
            && cargo build --release --target-dir=target)
    fi
}

function tool:win32yank {
    echo "Updating win32yank ..."
    install_win32yank
}

function tool:winget {
    if command -v winget.exe &> /dev/null; then
        echo "Updating winget packages ..."
        pwsh="powershell.exe -NoProfile -NoLogo -NonInteractive cd ~;"
        $pwsh "winget upgrade --all"
    fi
}

function tool:all {
    tool:dotfiles

    if [ "$(uname)" == "Linux" ]; then
        tool:apt

        if [ -e "/proc/version" ] && grep -q "microsoft" "/proc/version"; then
            tool:scoop
            tool:win32yank
            # tool:winget
        fi
    fi

    tool:brew
    tool:asdf
    tool:npm
    tool:pipx
    tool:rust

    tool:misc

    tool:fish
    tool:nvim
    tool:tmux

    exec "$SHELL"
}

function tool:list {
    compgen -A function | sed -rn 's/tool:(.*)/\1/p' | cat
}

function tool:help {
    printf "Usage: %s [TOOL] [ARGS]\n\nTools:\n" "$0"

    compgen -A function | sed -rn 's/tool:(.*)/\1/p' | cat -n
}

"tool:${@:-all}"
